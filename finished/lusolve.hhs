/** 
* 
* @author Jason Reynolds 
* @param - inputM the matrix in the equation Ax=b, namely A
* @param - inputCol the column vector in the equation Ax = b, namely b
* @returns - the matrix answer , x, to the equation Ax=b using lu decomposition
*
* Function that uniquely solves the equation Ax = b for a square matrix/Mat A and column vector b
*/

function lusolve(inputM, inputCol) {

    //if any input is Mat, turn it down into raw array
    if (inputM instanceof Mat) {
        inputM = inputM.val;
    }
    if (inputCol instanceof Mat) {
        inputCol = inputCol.val;
    }

    //make sure they are correct dimensions
    const arr_col = inputM.map(e => e[0]);
    const col_vec = inputCol.map(e => e[0]);
    if (inputM.length == 0 || inputM[0].length == 0 || inputM.length !== arr_col.length || col_vec.length !== inputM.length) {
        throw new Error('Wrong dimensions. Need nxn matrix, may want to try lusolveAll or check column vector');
    }
    //define the result to be the lusolve output ie the solution
    let result = mathjs.lusolve(inputM, inputCol);
    //return it as a Mat object
    return new Mat(result);
}