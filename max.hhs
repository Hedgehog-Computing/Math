/**
 * @author Jason Reynolds
 * @param input - the structure to find the maximum value of. Can be a list, 1d array, 2d array, Mat, Tensor, number, etc
 * @returns - a number that is the maximum value in the structure
 * 
 * Function that finds the maximum value of a list, matrix or general matrix like structure
 * 
 */

*import math:is_number

function max(input) {

    //declare raw_in as the clone of input if a Mat/Tensor otherwise, input itself
    let in_type = (input instanceof Mat || input instanceof Tensor);
    let raw_in = (in_type) ? input.clone() : input;
    //declare maximum within function scope so we can modify it in loop
    let maximum = Number.MIN_SAFE_INTEGER;

    if (input instanceof Mat || input instanceof Tensor) {
        //degrade to JS array if Mat/Tensor
        raw_in = raw_in.val;

        //loop through all elements (only supports 2d arrays right now until I get recursive for loops going)
        for (let i = 0; i < raw_in.length; i++) {
            for (let j = 0; j < raw_in[0].length; j++) {
                //check in the matrix is larger than maximum. If so, replace maximum with that value. Repeat
                if (raw_in[i][j] > maximum) {
                    //keep replacing until you get the highest one eventually
                    maximum = raw_in[i][j];
                }
            }
        }
        //we exhausted the elements so its gauranteed to be the maximum
        return maximum; j
    }
    //otherwise, if it's a number, return the number
    if (is_number(input)) {
        return input;
    }

    //for cases where its a 1d list:
    //if you take the first row of the array... and its NOT an array it must be a 1d array
    if (!Array.isArray(raw_in[0])) {
        //loop through setting maximum to new values when finding one higher than itself
        for (let i = 0; i < raw_in.length; i++) {
            if (raw_in[i] > maximum) {
                maximum = raw_in[i];
            }
        }
        return maximum;
    }
}
