/**
 * @author Jason Reynolds
 * 
 * @param input the matrix to be check if its lower triangular or not
 * @return boolean value true or false depending on if its determined to be lower triangular or not 
 * 
 * Function : is_tril - a boolean function to determine if a square matrix is lower triangular or not. Counter part to is_triu (upper triangular)
 * 
 * 
 */

function is_tril(input) {

    let in_type = (input instanceof Mat);
    let raw_in = (in_type) ? input.clone() : input;
    //turn Mat down to raw array in case it isn't 
    if (input instanceof Mat) {
        raw_in = raw_in.val;
    }
    //need a square matrix, non empty, as input
    if (raw_in.length === 0 || raw_in[0].length === 0 || !(raw_in.length === raw_in[0].length)) {
        throw new Error('Wrong dimensions. Needs a square matrix as input');
    }
    //get a raw array of correct size initiliazed

    //necessary ??
    let copy_input = zeros(raw_in.length, raw_in[0].length).val;
    for (i = 0; i < raw_in.length; i++) {
        for (j = 0; j < raw_in[0].length; j++) {
            copy_input[i][j] = raw_in[i][j];
        }
    }
    //iterate through array and if you spot a non-zero entry in a spot in the lower triangular region, return false
    //cut a sub matrix in the lower triangular region
    for (k = 1; k < copy_input.length; k++) {
        for (h = 0; h < copy_input.length - 1; h++) {
            //when in the tringaular zone exactly
            if (h < k) {
                if (!(copy_input[h][k] === 0)) {
                    return false;
                }
            }
        }
    }
    //if it goes through the whole loop just fine then all the lower triangular entries are zero
    return true;
}