/*
*  Function: adds
*  This function is simply to add a constant to a matrix element-wise. 
*  The input can be a matrix or Mat object and the output is a Mat object.
*
* @author Jason Reynolds
* @param add_constant the constant that you would like to add to the matrix, element-wise
* @param input the incoming input which can be a matrix, Mat or later a tensor
* @return Mat returns a Mat object for the user to see their matrix as a Mat object
*/

*import math:is_number

function adds(add_constant, input) {

    if (!(is_number(add_constant))) {
        throw new Error('constant is not a number');
    }
    //in the case that the input is a Mat object 
    if (input instanceof Mat) {
        //copy over the value of Mat to a raw 2d array
        let result_array = input.val;
        //iterate through the array and add the constant to each element
        let input_col = result_array.map(e=>e[0]);
        for (i=0; i<result_array.length; i++) {
            for (j=0;j<input_col.length;j++) {
                result_array[i][j] = result_array[i][j]+add_constant;
            }
        }
        //return the array as a Mat
        return new Mat(result_array);
    }
    //otherwise, when a raw 2d array
    else {
        let result_col = input.map(e=>e[0]);
        //initalize an array of the correct size full of zeros
        let result_array = zeros(input.length, result_col.length).val;
        //copy the inputs values to the eventually returning array. 
        //purpose being to avoid handling input data and instead copy it and work on the copy
        for (i = 0; i < input.length; i++) {
            for (j = 0; j< result_col.length; j++) {
                result_array[i][j] = input[i][j];
            }
        }
        //use the copied array and add the constant through a loop
        for (h = 0; h<input.length; h++) {
            for (k=0; k<result_col.length;k++) {
                result_array[h][k] = result_array[h][k]+add_constant;
            }
        }
        //return it. Make it Mat type since intitialized by zeros() non mat-type
        return new Mat(result_array);
    }
}