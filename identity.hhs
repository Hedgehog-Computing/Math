/**
 * @author Mudroad White
 * @param input - a positive integer denoting the size of the expected matrix.
 * @returns - a Mat object representing a 2D identity matrix.
 */

function identity(input) {

	*import math: is_number

	// Corner cases for input
	// First, input should be a positive integer
	if (!Number.isInteger(input) || input < 0) {
		throw new Error('Expecped positive integer input')
	}

	// Then we return special Mat value when input is 0 or 1
	if (input === 0) {
		return new Mat([]);
	}

	if (input === 1) {
		return new Mat([[1]]);
	}

	// Now we can start on creating the Id matrix
	let result = new Mat().zeros(n, n);
	for (let i = 0; i < n; i++){
		result[i][i] = 1;
	}	

	// return as a Mat object
	return result;

	// Note: the implementation of `result` above is for practicing purpose, from which I've learnt a lot.
	// A better implementation suggested by the team is as follows, so feel free to alternate between the above 
	// version and the following one.
	// result = mathjs.identity(input);
	// // return the result as a mat object
	// return mat(result);
}