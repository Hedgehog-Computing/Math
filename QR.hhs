/**
 * @author Jason Reynolds
 * @param input - the matrix to be decomposed via the QR method
 * @returns - 2 object values of type Mat, Q and R, the matrices it decomposes input into, and input = Q*R
 * 
 * simple js wrapper for QR function
 * function that takes in a raw or object matrix, decomposes it using QR method, and return the Q and R as objects
 */

function QR(input) {

    //declare raw_in as input.clone() if Mat type otherwise, input itself
    let in_type = (input instanceof Mat)
    let raw_in = (in_type) ? input.clone() : JSON.parse(JSON.stringify(input));

    //in the case of input being a Mat, degrade to JS array for 'raw_in' to apply for both JS arrays and Mat objects 
    if (input instanceof Mat) {
        raw_in = raw_in.val;
    }
    //assign result the object/values obtained from mathjs.qr
    let result = mathjs.qr(raw_in);
    //return said values from object
    return {
        Q: mat(result.Q),
        R: mat(result.R)
    }
}