/**
 * @author Jason Reynolds
 * 
 * @param inputM - the matrix in the Ax=b equation, namely A, to solve for x
 * @param inputCol - the column vector in the Ax=b equation, namely b, to solve for x
 * @returns - the value of 'x', in Ax=b, the solution to the equation. 
 * 
 * Function similar to lsolve - it solves an nxn matrix exquation Ax = b for x. May work faster but only allows upper triangular matrices as input
 */

 *import math:is_triu;

 function usolve(inputM, inputCol) {

    //make sure that the input array is upper triangular
    if (!(is_triu(inputM))) {
        throw new Error('Non upper triangular matrix in input');
    }
    //if any input is Mat, turn it down into raw array
    if (inputM instanceof Mat) {
        inputM = inputM.val;
    }
    if (inputCol instanceof Mat) {
        inputCol = inputCol.val;
    }

    //make sure they are correct dimensions, has to be square matrix 
    const arr_col = inputM.map(e => e[0]);
    const col_vec = inputCol.map(e => e[0]);
    if (inputM.length == 0 || inputM[0].length == 0 || inputM.length !== arr_col.length || col_vec.length !== inputM.length) {
        throw new Error('Wrong dimensions. Need nxn matrix, may want to try lusolveAll or check column vector');
    }
    //define the result to be the lusolve output ie the solution
    let result = mathjs.usolve(inputM, inputCol);
    //return it as a Mat object
    return new Mat(result);
}